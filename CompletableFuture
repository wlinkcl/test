https://myadventuresincoding.wordpress.com/2020/06/02/java-simple-completablefuture-example/

 public List<Integer> getItems(List<Integer> items) {
 
        // Create a CompletableFuture for each item being requested
        // and start each request asynchronously
        List<CompletableFuture<List<Integer>>> futures = items.stream()
                .map(item -> CompletableFuture.supplyAsync(() -> getItem(item)))
                .collect(Collectors.toList());
 
        // Wait for ALL CompletableFutures to finish then return
        return futures.stream()
                .map(CompletableFuture::join)
                .flatMap(List::stream)
                .collect(Collectors.toList());
    }
    
    
